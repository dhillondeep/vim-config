if &compatible
	set nocompatible
endif

" Set main configuration directory as parent directory
let $VIM_PATH = fnamemodify(resolve(expand('<sfile>:p')), ':h:h')

" Initialize startup settings
if has ('vim_starting')
	" Spacebar is the leader and ; is a secondary leader
	let g:mapleader="\<Space>"
	let g:maplocalleader=';'

	" Release keymappings prefixes, evict entirely for use of plug-ins
	nnoremap <Space> <Nop>
	xnoremap <Space> <Nop>
	nnoremap , 	 <Nop>
	xnoremap ,	 <Nop>
	nnoremap ;	 <Nop>
	xnoremap ;	 <Nop>
endif

function! s:source_file(path, ...)
	" Source user configuration files with set/global sensitivity
	let use_global = get(a:000, 0, ! has ('vim_starting'))
	let abspath = resolve($VIM_PATH . '/' . a:path)
	if ! use_global
		execute 'source' fnameescape(abspath)
		return
	endif

	let tempfile = tempname()
	let content = map(readfile(abspath),
		\ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
	try
		call writefile(content, tempfile)
		execute printf('source %s', fnameescape(tempfile))
	finally
		if filereadable(tempfile)
			call delete(tempfile)
		endif
	endtry
endfunction

" Allow user to load confidential information
" We will source this file sparately
" File must be named "vault.vim"
if filereadable($VIM_PATH . '/.vault.vim')
	call s:source_file('./valut.vim')
endif


" Load main config files and pluggin manager
call s:source_file('config/init.vim')
call s:source_file('config/plugins/all.vim')

" Initialize configurations
call s:source_file('config/general.vim')
"call s:source_file('config/filetype.vim')
call s:source_file('config/mappings.vim')
call s:source_file('config/theme.vim')

" Load user custom configurations
if filereadable($VIM_PATH . '/config/local.vim')
	call s:source_file('config/local.vim')
endif

set secure
